---
import DeveloperIcon from "../components/icons/Developer.astro";
import GithubIcon from "../components/icons/Github.astro";

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Habilidades",
    label: "habilidades",
    url: "/#habilidades",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "/#contacto",
  },
];
---

<header class="fixed top-0 z-10 w-full px-4 lg:px-6 py-2.5 shadow-md">
  <div class="flex flex-wrap justify-between items-center mx-auto max-w-screen-xl">
    <!-- Left Section (Logo) -->
    <a href="./" class="flex items-center">
      <DeveloperIcon class="w-6 h-6 text-blue-500 mr-2" />
      <span class="self-center text-xl font-semibold whitespace-nowrap text-gray-800 dark:text-gray-200">Fabrizzio.</span>
    </a>

    <!-- Center Section (Navigation) -->
    <nav class="hidden lg:flex lg:space-x-8">
      {navItems.map((link) => (
        <a
          href={link.url}
          class="text-gray-700 hover:text-blue-500 dark:text-gray-400 dark:hover:text-white text-sm font-medium"
          aria-label={link.label}
        >
          {link.title}
        </a>
      ))}
    </nav>

    <!-- Right Section -->
    <div class="flex items-center space-x-4">
      <!-- GitHub Icon -->
      <a
        href="https://github.com/tu-usuario"
        target="_blank"
        rel="noopener noreferrer"
        aria-label="GitHub"
        class="text-gray-800 dark:text-white hover:bg-gray-50 focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm p-2 dark:hover:bg-gray-700 focus:outline-none dark:focus:ring-gray-800"
      >
        <GithubIcon class="w-6 h-6" />
      </a>

      <!-- Mobile Menu Button -->
      <button
        id="menu-toggle"
        data-collapse-toggle="mobile-menu"
        type="button"
        class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg lg:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
        aria-controls="mobile-menu"
        aria-expanded="false"
      >
        <span class="sr-only">Open main menu</span>
        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path
            fill-rule="evenodd"
            d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
            clip-rule="evenodd"
          ></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <nav class="hidden justify-between items-center w-full lg:hidden" id="mobile-menu">
    <ul class="flex flex-col mt-4 font-medium">
      {navItems.map((link) => (
        <li>
          <a
            href={link.url}
            class="block py-2 pr-4 pl-3 text-gray-700 hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            aria-label={link.label}
          >
            {link.title}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");

    if (menuToggle && mobileMenu) {
      menuToggle.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
      });
    }
  });
</script>

<script>
  document.addEventListener("astro:page-load", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");

    if (menuToggle && mobileMenu) {
      menuToggle.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
      });
    }

    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

