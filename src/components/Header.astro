---
import DeveloperIcon from "../components/icons/Developer.astro";
import GithubIcon from "../components/icons/Github.astro";

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Habilidades",
    label: "habilidades",
    url: "/#habilidades",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "/#contacto",
  },
];
---

<header class="fixed top-0 z-10 flex items-center justify-between w-full px-20 py-2 mx-auto mt-2 shadow-md">
  <!-- Left Section -->
  <div class="flex items-center gap-2">
    <a href="./" class="flex items-center gap-2">
      <DeveloperIcon class="w-6 h-6 text-blue-500" />
      <span class="text-xl font-semibold text-gray-800 dark:text-gray-200">Fabrizzio.</span>
    </a>
  </div>

  <!-- Navigation -->
  <nav class="flex gap-x-8 text-lg font-medium text-gray-600 dark:text-gray-200">
    {navItems.map((link) => (
      <a
        class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
        aria-label={link.label}
        href={link.url}
      >
        {link.title}
      </a>
    ))}
  </nav>

  <!-- Right Section -->
  <div>
    <a
      href="https://github.com/tu-usuario"
      target="_blank"
      rel="noopener noreferrer"
      aria-label="GitHub"
    >
      <GithubIcon class="w-6 h-6 text-gray-800 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-500 transition" />
    </a>
  </div>
</header>

<script>
    document.addEventListener("astro:page-load", () => {
      const sections = document.querySelectorAll("section")
      const navItems = document.querySelectorAll("header nav a")
  
      const callback = (entries: any[]) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
              if (item.getAttribute("aria-label") == entry.target.id) {
                item.classList.add("text-blue-500")
              } else {
                item.classList.remove("text-blue-500")
              }
            })
          }
        })
      }
  
      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px",
        threshold: 0.3,
      })
  
      sections.forEach((section) => {
        observer.observe(section)
      })
  
      // Cleanup function
      document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
          observer.disconnect()
        } else {
          sections.forEach((section) => {
            observer.observe(section)
          })
        }
      }
    })
  </script>

